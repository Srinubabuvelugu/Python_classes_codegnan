1. Explain the difference between mutable and immutable data types in Python. Give at least two examples for each.

2. Write a Python function to find the N largest elements from a list without using any bulit in functions and methods.
Test Case 1
Input: ([1, 23, 12, 9, 30, 2, 50], N=3)
Output: [50, 30, 23]
Explanation: The top 3 largest numbers are 50, 30, and 23.
Test Case 2
Input: ([10, 5, 20, 8, 15], N=2)
Output: [20, 15]
Explanation: The two largest numbers are 20 and 15.

3. Palindrome Checker with Special Character Handling
Write a Python function that checks if a string is a palindrome, considering only alphanumeric characters and ignoring cases.
Test Case 1:
Input: "A man, a plan, a canal: Panama"
Output: True
Explanation: After removing non-alphanumeric characters and converting to lowercase: "amanaplanacanalpanama" which is a palindrome.
Test Case 2:
Input: "race a car"
Output: False
Explanation: After processing: "raceacar" which is not a palindrome (raceacar ≠ racaecar).


4. What is a method in Python? Explain the different types of methods (instance method, class method, and static method) with examples. Also, mention when you would use each type.



5. Valid Anagram
Problem: Write a Python function that checks if two strings are anagrams of each other.
Test Case 1:
Input: s = "anagram", t = "nagaram"
Output: True
Explanation: Both strings contain the same characters with the same frequencies.
Test Case 2:
Input: s = "rat", t = "car"
Output: False
Explanation: 'r', 'a', 't' vs 'c', 'a', 'r' - different character sets.

6. Reverse Words in a String
Write a Python function that reverses the order of words in a string.
Test Case 1:
Input: "the sky is blue"
Output: "blue is sky the"
Explanation: The words are reversed while maintaining their internal order.
Test Case 2:
Input: "  hello world  "
Output: "world hello"
Explanation: Leading/trailing spaces are removed and multiple spaces between words are reduced to single space.

7. Write a Python program to check whether a given number is an Armstrong number.
An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.
Test Case 1
Input: 153
Output: Yes, 153 is an Armstrong number
Explanation: 1^3 + 5^3 + 3^3 = 153  
Test Case 2
Input: 123
Output: No, 123 is not an Armstrong number
Explanation: 1^3 + 2^3 + 3^3 = 36 !=123

8. Find Peak Element
Write a Python function  that finds a peak element (greater than its neighbors) in an array.
Test Case 1:
Input: [1, 2, 3, 1]
Output: 2
Explanation: Element at index 2 (value 3) is a peak element (3 > 2 and 3 > 1).
Test Case 2:
Input: [1, 2, 1, 3, 5, 6, 4]
Output: 1 or 5
Explanation: Both index 1 (value 2) and index 5 (value 6) are peak elements.


9. Remove Element
Write a Python function that removes all occurrences of val from an array in-place and returns the new length. The order of elements may be changed.
Test Case 1:
Input: nums = [3, 2, 2, 3], val = 3
Output: 2, nums = [2, 2, _, _]
Explanation: First two elements should be [2, 2], remaining elements can be anything.
Test Case 2:
Input: nums = [0, 1, 2, 2, 3, 0, 4, 2], val = 2
Output: 5, nums = [0, 1, 3, 0, 4, _, _, _]
Explanation: First 5 elements contain no 2's: [0, 1, 3, 0, 4].


10. Two Sum with Sorted Input
Write a Python function that finds two numbers in a sorted list that add up to a specific target. Return the indices of the two numbers (1-indexed).
Test Case 1:
Input: numbers = [2, 7, 11, 15], target = 9
Output: [1, 2]
Explanation: numbers[0] + numbers[1] = 2 + 7 = 9, so return [1, 2] (1-indexed).
Test Case 2:
Input: numbers = [3, 4, 5, 6, 9], target = 11
Output: [2, 4]
Explanation: numbers[1] + numbers[3] = 4 + 7 = 11, so return [2, 4].

11. Write a Python program to count the frequency of each word in a given text file.
Test Case 1
File Content: "hello world hello"
Output: {'hello': 2, 'world': 1}
Explanation: "hello" appears twice, "world" once.
Test Case 2
File Content: "Python is fun and Python is powerful"
Output: {'Python': 2, 'is': 2, 'fun': 1, 'and': 1, 'powerful': 1}
Explanation: Each word count is calculated correctly.

12. Product of Array Except Self
Write a Python program that returns an array where each element is the product of all the numbers in the array except itself. Solve it without division and in O(n) time.
Test Case 1:
Input: [1, 2, 3, 4]
Output: [24, 12, 8, 6]
Explanation: For index 0: 2×3×4=24, index 1: 1×3×4=12, index 2: 1×2×4=8, index 3: 1×2×3=6
Test Case 2:
Input: [-1, 1, 0, -3, 3]
Output: [0, 0, 9, 0, 0]
Explanation: Contains zero - products become zero except for the zero element itself.

13. Find All Numbers Disappeared in Array
Write a Python program that finds all numbers in range [1, n] that are missing from an array of length n.
Test Case 1:
Input: [4, 3, 2, 7, 8, 2, 3, 1]
Output: [5, 6]
Explanation: Numbers 5 and 6 are missing from the array [1,2,3,4,7,8].
Test Case 2:
Input: [1, 1]
Output: [2]
Explanation: Array has duplicates of 1, so 2 is missing.

14. Kth Largest Element in Array
Write a Python program that finds the kth largest element in an unsorted array.
Test Case 1:
python
Input: [3, 2, 1, 5, 6, 4], k = 2
Output: 5
Explanation: Sorted: [1,2,3,4,5,6], 2nd largest is 5.
Test Case 2:
python
Input: [3, 2, 3, 1, 2, 4, 5, 5, 6], k = 4
Output: 4
Explanation: Sorted unique: [1,2,3,4,5,6], 4th largest is 4.

15. Longest Common Prefix
Write a Python Program that finds the longest common prefix string amongst an array of strings.
Test Case 1:
python
Input: ["flower", "flow", "flight"]
Output: "fl"
Explanation: All strings start with "fl".
Test Case 2:
python
Input: ["dog", "racecar", "car"]
Output: ""
Explanation: No common prefix among all strings.

16. Write a Python function that rotates an array to the right by k steps (in-place).
Test Case 1:
Input: nums = [1, 2, 3, 4, 5, 6, 7], k = 3
Output: [5, 6, 7, 1, 2, 3, 4]
Explanation: Rotate 1 step: [7,1,2,3,4,5,6], rotate 2 steps: [6,7,1,2,3,4,5], rotate 3 steps: [5,6,7,1,2,3,4]
Test Case 2:
Input: nums = [-1, -100, 3, 99], k = 2
Output: [3, 99, -1, -100]
Explanation: Rotate 1 step: [99,-1,-100,3], rotate 2 steps: [3,99,-1,-100]

17. First Missing Positive Integer
Write a Python function that finds the smallest missing positive integer.
Test Case 1:
Input: [3, 4, -1, 1]
Output: 2
Explanation: The smallest missing positive integer is 2 (1 is present, 3 and 4 are present).
Test Case 2:
Input: [7, 8, 9, 11, 12]
Output: 1
Explanation: All numbers are positive but 1 is missing from the sequence.

18. Positive Number Checker
Program: Write a program that asks the user for a number and prints whether it is positive, negative, or zero.
Test Cases:
•	Input: 5 → Output: Positive number
•	Input: -3 → Output: Negative number
•	Input: 0 → Output: Zero

19. Number Reversal
Program: Write a program that reverses a given number.
Test Cases:
•	Input: 1234 → Output: Reverse of 1234 is 4321
•	Input: 100 → Output: Reverse of 100 is 1 (or 001)


20. Move Zeroes to End
Write a Python program that moves all 0's to the end of an array while maintaining the relative order of the non-zero elements. Do this in-place without making a copy of the array.
Test Case 1:
Input: [0, 1, 0, 3, 12]
Output: [1, 3, 12, 0, 0]
Explanation: All zeroes are moved to the end while non-zero elements maintain their relative order.
Test Case 2:
Input: [0, 0, 0, 5, 0, 8, 2]
Output: [5, 8, 2, 0, 0, 0, 0]
Explanation: Zeroes are moved to the end, non-zero elements [5, 8, 2] keep their order.

21.  Bank Account Class with Basic Operations
Create a BankAccount class with deposit, withdraw, and check balance functionality.
Test Case 1:
account = BankAccount("123456", 1000)
account.deposit(500)
account.withdraw(200)
print(account.get_balance())  # Output: 1300
Test Case 2:
account = BankAccount("789012", 500)
account.withdraw(600)  # Should not allow
print(account.get_balance())  # Output: 500 (unchanged)
22. Simple Calculator
Program: Write a program that takes two numbers and an operator (+, -, *, /) from the user and performs the calculation.
Test Cases:
•	Input: 5, +, 3 → Output: 8.0
•	Input: 10, *, 2.5 → Output: 25.0
•	Input: 8, /, 0 → Output: Error! Division by zero.

23. Sum of Natural Numbers
Program: Write a program that calculates the sum of first n natural numbers.
Test Cases:
•	Input: 5 → Output: Sum of first 5 natural numbers is 15
•	Input: 10 → Output: Sum of first 10 natural numbers is 55

24. Find All Duplicates in Array
Write a Python function that returns all elements that appear exactly twice in an array of integers (1 ≤ nums[i] ≤ n).
Test Case 1:
Input: [4, 3, 2, 7, 8, 2, 3, 1]
Output: [2, 3]
Explanation: Numbers 2 and 3 appear exactly twice in the array.
Test Case 2:
Input: [1, 2, 3, 4, 5, 1, 2]
Output: [1, 2]
Explanation: Numbers 1 and 2 appear exactly twice, others appear once.


25. Maximum Subarray Sum 
Write a Python function  that finds the contiguous subarray with the largest sum.
Test Case 1:
python
Input: [-2, 1, -3, 4, -1, 2, 1, -5, 4]
Output: 6
Explanation: The subarray [4, -1, 2, 1] has the largest sum = 6.
Test Case 2:
python
Input: [5, 4, -1, 7, 8]
Output: 23
Explanation: The entire array [5,4,-1,7,8] has the largest sum = 23.

26. Book Class with Rating System
Create a Book class with title, author, and rating attributes. Include methods to update rating and display book info.
Test Case 1:
book1 = Book("Python Basics", "John Doe", 4.5)
book1.display_info()  # Output: "Python Basics by John Doe - Rating: 4.5/5"
Test Case 2:
book2 = Book("Java Guide", "Jane Smith", 3.8)
book2.update_rating(4.2)
book2.display_info()  # Output: "Java Guide by Jane Smith - Rating: 4.2/5"

27. Write a Python class BankAccount that supports deposit, withdraw, and balance enquiry. Ensure that withdrawal does not exceed balance.
Test Case 1
acc = BankAccount(1000)
acc.deposit(500)
acc.withdraw(300)
print(acc.get_balance())
Output: 1200
Explanation: Initial 1000 + deposit 500 - withdrawal 300 = 1200.
Test Case 2
acc = BankAccount(500)
acc.withdraw(600)
print(acc.get_balance())
Output: Insufficient balance
Explanation: Withdrawal is not allowed since balance < 600.
